
# =============================================
# INTERFAZ DE OPERACI√ìN PRINCIPAL
# =============================================

if __name__ == "__main__":
    import argparse
    
    parser = argparse.ArgumentParser(description="MechAutomation Quantum Engine")
    parser.add_argument('--dimensions', type=int, default=4, 
                       help="N√∫mero de dimensiones paralelas (3-12)")
    parser.add_argument('--warp', type=int, default=7,
                       help="Factor de curvatura espacio-temporal (1-11)")
    parser.add_argument('--input', type=str, required=True,
                       help="Archivo de datos de entrada")
    parser.add_argument('--process', choices=['standard', 'temporal', 'high_energy'],
                       default='standard', help="Tipo de procesamiento")
    
    args = parser.parse_args()
    
    try:
        # Carga de datos cu√°nticos
        input_data = np.load(args.input, allow_pickle=True)
        
        # Inicializaci√≥n del motor
        with QuantumEngine(dimensions=args.dimensions, 
                         warp_factor=args.warp) as engine:
            
            # Procesamiento principal
            if isinstance(input_data, list):
                results = engine.parallel_dimension_process(input_data)
            else:
                results = engine.execute_quantum_process(input_data, args.process)
                
            # Guardado de resultados
            output_file = f"quantum_results_{args.dimensions}D.npy"
            np.save(output_file, results)
            print(f"üìä Resultados guardados en {output_file}")
            
    except Exception as e:
        print(f"‚ùå Error en procesamiento cu√°ntico: {str(e)}")
        exit(1)
