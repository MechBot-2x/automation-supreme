from tensorflow.keras.models import Model
from tensorflow.keras.layers import (Input, Dense, Conv2D, 
                                   MultiHeadAttention, 
                                   LayerNormalization,
                                   Dropout)
from tensorflow.keras.quantum import QuantumLayer
from tensorflow.keras.regularizers import l2
import tensorflow as tf
import numpy as np

class CosmicClassifier:
    def __init__(self, input_shape=(256, 256, 4), 
                 num_classes=12, 
                 quantum_bits=8):
        """
        Inicializa el clasificador cósmico con arquitectura híbrida
        
        Args:
            input_shape: Dimensiones de los eventos cósmicos (H, W, C)
            num_classes: Número de categorías de eventos
            quantum_bits: Qubits para capa cuántica
        """
        self.input_shape = input_shape
        self.num_classes = num_classes
        self.quantum_bits = quantum_bits
        self.model = self._build_hybrid_model()
        
    def _build_hybrid_model(self):
        """Construye modelo híbrido clásico-cuántico"""
        # Entrada de eventos cósmicos
        inputs = Input(shape=self.input_shape, name='cosmic_input')
        
        # Procesamiento clásico inicial
        x = Conv2D(64, (3, 3), activation='swish', 
                  kernel_regularizer=l2(1e-4))(inputs)
        x = tf.keras.layers.MaxPooling2D((2, 2))(x)
        x = Conv2D(128, (3, 3), activation='swish')(x)
        x = tf.keras.layers.GlobalAveragePooling2D()(x)
        
        # Atención cuántica multidimensional
        x = self._quantum_attention_layer(x)
        
        # Capa de clasificación final
        outputs = Dense(self.num_classes, 
                       activation='softmax',
                       name='cosmic_classification')(x)
        
        return Model(inputs=inputs, outputs=outputs)
    
    def _quantum_attention_layer(self, x):
        """Capa de atención con procesamiento cuántico"""
        # Transformación clásica
        x = Dense(256, activation='gelu')(x)
        x = LayerNormalization()(x)
        
        # Mecanismo de atención cuántica
        query = QuantumLayer(
            units=128,
            n_qubits=self.quantum_bits,
            activation='linear',
            name='quantum_query'
        )(x)
        
        key = QuantumLayer(
            units=128,
            n_qubits=self.quantum_bits,
            activation='linear',
            name='quantum_key'
        )(x)
        
        value = Dense(128)(x)
        
        # Atención multi-head cuántica
        attention_output = MultiHeadAttention(
            num_heads=4,
            key_dim=32,
            name='cosmic_attention'
        )(query, key, value)
        
        # Normalización residual
        x = tf.keras.layers.Add()([x, attention_output])
        x = LayerNormalization()(x)
        return Dropout(0.3)(x)
    
    def compile_model(self, learning_rate=3e-5):
        """Configura el modelo para entrenamiento"""
        optimizer = tf.keras.optimizers.AdamW(
            learning_rate=learning_rate,
            weight_decay=1e-4
        )
        
        self.model.compile(
            optimizer=optimizer,
            loss='sparse_categorical_crossentropy',
            metrics=[
                'accuracy',
                self._cosmic_accuracy,
                self._quantum_confidence
            ]
        )
    
    def _cosmic_accuracy(self, y_true, y_pred):
        """Precisión ajustada para eventos cósmicos"""
        return tf.keras.metrics.top_k_categorical_accuracy(
            y_true, y_pred, k=3
        )
    
    def _quantum_confidence(self, y_true, y_pred):
        """Medida de confianza cuántica"""
        max_probs = tf.reduce_max(y_pred, axis=-1)
        return tf.reduce_mean(max_probs)
    
    def train(self, train_data, val_data, epochs=100):
        """Entrenamiento con monitoreo cósmico"""
        callbacks = [
            tf.keras.callbacks.ModelCheckpoint(
                'cosmic_classifier.h5',
                save_best_only=True,
                monitor='val_quantum_confidence',
                mode='max'
            ),
            tf.keras.callbacks.EarlyStopping(
                patience=15,
                restore_best_weights=True
            )
        ]
        
        history = self.model.fit(
            train_data,
            validation_data=val_data,
            epochs=epochs,
            callbacks=callbacks
        )
        
        return history
    
    def predict_event(self, cosmic_event):
        """Predicción de categoría de evento"""
        if isinstance(cosmic_event, np.ndarray):
            cosmic_event = np.expand_dims(cosmic_event, axis=0)
        
        probs = self.model.predict(cosmic_event)
        return np.argmax(probs), np.max(probs)
    
    def explain_prediction(self, cosmic_event):
        """Genera explicación cuántica de la predicción"""
        grad_model = tf.keras.models.Model(
            inputs=self.model.inputs,
            outputs=[self.model.output, 
                    self.model.get_layer('cosmic_attention').output]
        )
        
        with tf.GradientTape() as tape:
            preds, attention = grad_model(cosmic_event)
            top_class = preds[:, np.argmax(preds)]
            
        grads = tape.gradient(top_class, attention)
        return grads.numpy()

# Protocolo de Serialización Cósmica
def save_cosmic_model(model, path):
    """Guarda modelo en formato .h5 con metadatos extendidos"""
    model.model.save(path, save_format='h5')
    
    # Metadata adicional
    metadata = {
        'input_shape': model.input_shape,
        'num_classes': model.num_classes,
        'quantum_bits': model.quantum_bits,
        'version': '4.7.2'
    }
    
    with h5py.File(path, 'a') as h5file:
        h5file.attrs.update(metadata)

def load_cosmic_model(path):
    """Carga modelo con metadatos cósmicos"""
    model = tf.keras.models.load_model(
        path,
        custom_objects={
            'QuantumLayer': QuantumLayer,
            '_cosmic_accuracy': CosmicClassifier._cosmic_accuracy,
            '_quantum_confidence': CosmicClassifier._quantum_confidence
        }
    )
    
    with h5py.File(path, 'r') as h5file:
        metadata = dict(h5file.attrs)
    
    classifier = CosmicClassifier(
        input_shape=metadata['input_shape'],
        num_classes=metadata['num_classes'],
        quantum_bits=metadata['quantum_bits']
    )
    
    classifier.model = model
    return classifier
